// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/user/v1/service.proto (package user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
	BinaryReadOptions,
	FieldList,
	JsonReadOptions,
	JsonValue,
	PartialMessage,
	PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message user.v1.SearchUserRequest
 */
export class SearchUserRequest extends Message<SearchUserRequest> {
	/**
	 * @generated from field: int32 limit = 1;
	 */
	limit = 0

	/**
	 * @generated from field: int32 offset = 2;
	 */
	offset = 0

	constructor(data?: PartialMessage<SearchUserRequest>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.SearchUserRequest'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
		{ no: 2, name: 'offset', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUserRequest {
		return new SearchUserRequest().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUserRequest {
		return new SearchUserRequest().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUserRequest {
		return new SearchUserRequest().fromJsonString(jsonString, options)
	}

	static equals(
		a: SearchUserRequest | PlainMessage<SearchUserRequest> | undefined,
		b: SearchUserRequest | PlainMessage<SearchUserRequest> | undefined,
	): boolean {
		return proto3.util.equals(SearchUserRequest, a, b)
	}
}

/**
 * @generated from message user.v1.SearchUserResponse
 */
export class SearchUserResponse extends Message<SearchUserResponse> {
	/**
	 * @generated from field: repeated user.v1.User users = 1;
	 */
	users: User[] = []

	constructor(data?: PartialMessage<SearchUserResponse>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.SearchUserResponse'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'users', kind: 'message', T: User, repeated: true },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUserResponse {
		return new SearchUserResponse().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUserResponse {
		return new SearchUserResponse().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUserResponse {
		return new SearchUserResponse().fromJsonString(jsonString, options)
	}

	static equals(
		a: SearchUserResponse | PlainMessage<SearchUserResponse> | undefined,
		b: SearchUserResponse | PlainMessage<SearchUserResponse> | undefined,
	): boolean {
		return proto3.util.equals(SearchUserResponse, a, b)
	}
}

/**
 * @generated from message user.v1.FindUserRequest
 */
export class FindUserRequest extends Message<FindUserRequest> {
	/**
	 * @generated from field: int32 user_id = 1;
	 */
	userId = 0

	constructor(data?: PartialMessage<FindUserRequest>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.FindUserRequest'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'user_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindUserRequest {
		return new FindUserRequest().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindUserRequest {
		return new FindUserRequest().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindUserRequest {
		return new FindUserRequest().fromJsonString(jsonString, options)
	}

	static equals(
		a: FindUserRequest | PlainMessage<FindUserRequest> | undefined,
		b: FindUserRequest | PlainMessage<FindUserRequest> | undefined,
	): boolean {
		return proto3.util.equals(FindUserRequest, a, b)
	}
}

/**
 * @generated from message user.v1.FindUserResponse
 */
export class FindUserResponse extends Message<FindUserResponse> {
	/**
	 * @generated from field: user.v1.User user = 1;
	 */
	user?: User

	constructor(data?: PartialMessage<FindUserResponse>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.FindUserResponse'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'user', kind: 'message', T: User },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindUserResponse {
		return new FindUserResponse().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindUserResponse {
		return new FindUserResponse().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindUserResponse {
		return new FindUserResponse().fromJsonString(jsonString, options)
	}

	static equals(
		a: FindUserResponse | PlainMessage<FindUserResponse> | undefined,
		b: FindUserResponse | PlainMessage<FindUserResponse> | undefined,
	): boolean {
		return proto3.util.equals(FindUserResponse, a, b)
	}
}

/**
 * @generated from message user.v1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
	/**
	 * @generated from field: string display_name = 1;
	 */
	displayName = ''

	constructor(data?: PartialMessage<CreateUserRequest>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.CreateUserRequest'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'display_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
		return new CreateUserRequest().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
		return new CreateUserRequest().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
		return new CreateUserRequest().fromJsonString(jsonString, options)
	}

	static equals(
		a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined,
		b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined,
	): boolean {
		return proto3.util.equals(CreateUserRequest, a, b)
	}
}

/**
 * @generated from message user.v1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
	/**
	 * @generated from field: user.v1.User user = 1;
	 */
	user?: User

	constructor(data?: PartialMessage<CreateUserResponse>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.CreateUserResponse'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'user', kind: 'message', T: User },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
		return new CreateUserResponse().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
		return new CreateUserResponse().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
		return new CreateUserResponse().fromJsonString(jsonString, options)
	}

	static equals(
		a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined,
		b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined,
	): boolean {
		return proto3.util.equals(CreateUserResponse, a, b)
	}
}

/**
 * @generated from message user.v1.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
	/**
	 * @generated from field: int32 user_id = 1;
	 */
	userId = 0

	/**
	 * @generated from field: string display_name = 2;
	 */
	displayName = ''

	constructor(data?: PartialMessage<UpdateUserRequest>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.UpdateUserRequest'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'user_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
		{ no: 2, name: 'display_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
		return new UpdateUserRequest().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
		return new UpdateUserRequest().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
		return new UpdateUserRequest().fromJsonString(jsonString, options)
	}

	static equals(
		a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined,
		b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined,
	): boolean {
		return proto3.util.equals(UpdateUserRequest, a, b)
	}
}

/**
 * @generated from message user.v1.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
	/**
	 * @generated from field: user.v1.User user = 1;
	 */
	user?: User

	constructor(data?: PartialMessage<UpdateUserResponse>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.UpdateUserResponse'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'user', kind: 'message', T: User },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
		return new UpdateUserResponse().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
		return new UpdateUserResponse().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
		return new UpdateUserResponse().fromJsonString(jsonString, options)
	}

	static equals(
		a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined,
		b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined,
	): boolean {
		return proto3.util.equals(UpdateUserResponse, a, b)
	}
}

/**
 * @generated from message user.v1.DeleteUserRequest
 */
export class DeleteUserRequest extends Message<DeleteUserRequest> {
	/**
	 * @generated from field: int32 user_id = 1;
	 */
	userId = 0

	constructor(data?: PartialMessage<DeleteUserRequest>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.DeleteUserRequest'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'user_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserRequest {
		return new DeleteUserRequest().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserRequest {
		return new DeleteUserRequest().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserRequest {
		return new DeleteUserRequest().fromJsonString(jsonString, options)
	}

	static equals(
		a: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined,
		b: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined,
	): boolean {
		return proto3.util.equals(DeleteUserRequest, a, b)
	}
}

/**
 * @generated from message user.v1.DeleteUserResponse
 */
export class DeleteUserResponse extends Message<DeleteUserResponse> {
	/**
	 * @generated from field: bool success = 1;
	 */
	success = false

	constructor(data?: PartialMessage<DeleteUserResponse>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.DeleteUserResponse'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserResponse {
		return new DeleteUserResponse().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserResponse {
		return new DeleteUserResponse().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserResponse {
		return new DeleteUserResponse().fromJsonString(jsonString, options)
	}

	static equals(
		a: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined,
		b: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined,
	): boolean {
		return proto3.util.equals(DeleteUserResponse, a, b)
	}
}

/**
 * @generated from message user.v1.User
 */
export class User extends Message<User> {
	/**
	 * @generated from field: int32 id = 1;
	 */
	id = 0

	/**
	 * @generated from field: string display_name = 2;
	 */
	displayName = ''

	/**
	 * @generated from field: string created_at = 3;
	 */
	createdAt = ''

	/**
	 * @generated from field: string updated_at = 4;
	 */
	updatedAt = ''

	/**
	 * @generated from field: string deleted_at = 5;
	 */
	deletedAt = ''

	constructor(data?: PartialMessage<User>) {
		super()
		proto3.util.initPartial(data, this)
	}

	static readonly runtime: typeof proto3 = proto3
	static readonly typeName = 'user.v1.User'
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: 'id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
		{ no: 2, name: 'display_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
		{ no: 3, name: 'created_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
		{ no: 4, name: 'updated_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
		{ no: 5, name: 'deleted_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
	])

	static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
		return new User().fromBinary(bytes, options)
	}

	static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
		return new User().fromJson(jsonValue, options)
	}

	static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
		return new User().fromJsonString(jsonString, options)
	}

	static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
		return proto3.util.equals(User, a, b)
	}
}
