/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/pets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description TBD */
    get: operations['listPets']
    put?: never
    /** @description TBD */
    post: operations['createPet']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/pets/{petId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description TBD */
    get: operations['getPetById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * @description A Problem Details object (RFC 9457)
     * @example {
     *       "title": "商品情報が取得できませんでした",
     *       "type": "ERR_1001",
     *       "status": 500,
     *       "detail": "商品APIの呼び出しがタイムアウトしました"
     *     }
     */
    problem: {
      /** @description 主要なエラーの要因のメッセージ */
      title: string
      /** @description 呼び出し元APIの定義しているエラーコード */
      type?: string
      /**
       * Format: int32
       * @description HTTPステータスコード
       * @example 500
       */
      status?: number
      /** @description エラーの詳細に関するメッセージ */
      detail?: string
    }
    /** @description A Pet */
    pet: {
      /**
       * Format: int64
       * @description ペットのID
       */
      id: number
      /** @description ペットの名前 */
      name: string
      /** @description ペットの種類タグ */
      tag?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  listPets: {
    parameters: {
      query?: {
        /** @description How many items to return at one time (max 100) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A array of pets */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description unexpected error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['problem']
        }
      }
    }
  }
  createPet: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['pet']
      }
    }
    responses: {
      /** @description Null response */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description unexpected error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['problem']
        }
      }
    }
  }
  getPetById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the pet to retrieve */
        petId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['pet']
        }
      }
      /** @description Unexpected error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['problem']
        }
      }
    }
  }
}
